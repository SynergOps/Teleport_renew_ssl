#!/bin/bash
# Script to renew SSL certificates for Teleport
# This script is intended to be run on a server with Teleport installed, 
# that is using systemd for service management, subdomain for the Teleport service,
# and configured to use Let's Encrypt for SSL certificates.
# It will stop the Teleport service, renew the SSL certificate, and restart the service.
# Make sure to run this script with root privileges.
#
# Usage: ./teleport_ssl_renew <subdomain>
# Example: ./teleport_ssl_renew example.yourdomain.com

# Set strict error handling
set -euo pipefail

# Configuration
BACKUP_DIR="$HOME/teleport_backup"
LOG_FILE="/var/log/teleport_ssl_renew.log"
SERVICE_TIMEOUT=30  # seconds
CERT_EXPIRY_THRESHOLD=30  # days

# Function to display messages and log them
display_message() {
    local message="$1"
    echo "===================================="
    echo "$message"
    echo "===================================="
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $message" >> "$LOG_FILE"
}

# Function to create backup
create_backup() {
    display_message "Creating backup of existing configuration"
    mkdir -p "$BACKUP_DIR"
    if [ -d "/var/lib/teleport" ]; then
        tar -czf "$BACKUP_DIR/teleport_backup_$(date +%Y%m%d_%H%M%S).tar.gz" -C /var/lib/teleport . 2>> "$LOG_FILE" || {
            display_message "Failed to create backup"
            return 1
        }
    fi
    if [ -f "/etc/teleport.yaml" ]; then
        cp /etc/teleport.yaml "$BACKUP_DIR/teleport.yaml.backup" 2>> "$LOG_FILE" || {
            display_message "Failed to backup teleport.yaml"
            return 1
        }
    fi
}

# Function to restore from backup
restore_backup() {
    display_message "Restoring from backup"
    local latest_backup=$(ls -t "$BACKUP_DIR"/teleport_backup_*.tar.gz 2>/dev/null | head -n1)
    if [ -n "$latest_backup" ]; then
        tar -xzf "$latest_backup" -C /var/lib/teleport 2>> "$LOG_FILE" || {
            display_message "Failed to restore backup"
            return 1
        }
    fi
    if [ -f "$BACKUP_DIR/teleport.yaml.backup" ]; then
        cp "$BACKUP_DIR/teleport.yaml.backup" /etc/teleport.yaml 2>> "$LOG_FILE" || {
            display_message "Failed to restore teleport.yaml"
            return 1
        }
    fi
}

# Function to check certificate expiry
check_cert_expiry() {
    local cert_file="/etc/letsencrypt/live/$1/cert.pem"
    if [ -f "$cert_file" ]; then
        local expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
        local expiry_epoch=$(date -d "$expiry_date" +%s)
        local current_epoch=$(date +%s)
        local days_until_expiry=$(( ($expiry_epoch - $current_epoch) / 86400 ))
        
        if [ "$days_until_expiry" -gt "$CERT_EXPIRY_THRESHOLD" ]; then
            display_message "Certificate is still valid for $days_until_expiry days. No renewal needed."
            return 1
        fi
        return 0
    fi
    return 0
}

# Function to wait for service with timeout
wait_for_service() {
    local service=$1
    local timeout=$2
    local start_time
    start_time=$(date +%s)
    
    while [ $(($(date +%s) - start_time)) -lt "$timeout" ]; do
        if systemctl is-active --quiet "$service"; then
            return 0
        fi
        sleep 1
    done
    return 1
}

# Check if the user is root
if [ "$EUID" -ne 0 ]; then
    display_message "Please run this script as root or using sudo."
    exit 1
fi

# Check if certbot is installed
if ! command -v certbot &> /dev/null; then
    display_message "certbot could not be found. Please install certbot first."
    exit 1
fi

# Check if Teleport is installed
if ! command -v teleport &> /dev/null; then
    display_message "Teleport could not be found. Please install Teleport first."
    exit 1
fi

# Check if systemctl is available
if ! command -v systemctl &> /dev/null; then
    display_message "systemctl could not be found. Please run this script on a system with systemd."
    exit 1
fi

# Check if the script is run with a subdomain argument
if [ -z "$1" ]; then
    display_message "No subdomain provided. Please provide a subdomain as an argument."
    display_message "Usage: $0 <subdomain>"
    exit 1
fi

# Check if the subdomain is valid
if ! [[ "$1" =~ ^[a-zA-Z0-9.-]+$ ]]; then
    display_message "Invalid subdomain format. Please provide a valid subdomain."
    display_message "Example of a valid subdomain: example.yourdomain.com"
    exit 1
fi

# Prompt the user to confirm before proceeding
display_message "You have entered the subdomain: $1"
read -p "Do you want to continue with this subdomain? (type yes/no): " confirmation
if [[ "$confirmation" != "yes" ]]; then
    display_message "Operation canceled by the user."
    exit 0
fi

# Set the subdomain variable
subdomain="$1"

# Create backup before proceeding
create_backup || {
    display_message "Failed to create backup. Aborting."
    exit 1
}

# Check certificate expiry
if check_cert_expiry "$subdomain"; then
    display_message "Certificate needs renewal"
else
    display_message "Certificate is still valid. Do you want to force renewal? (yes/no)"
    read -r force_renewal
    if [[ "$force_renewal" != "yes" ]]; then
        display_message "Operation canceled by user."
        exit 0
    fi
fi

# Check if the subdomain is reachable
if ! ping -c 1 "$subdomain" &> /dev/null; then
    display_message "The subdomain $subdomain is not reachable. Please check your network connection."
    exit 1
fi

# Renew SSL certificate
display_message "Renewing SSL certificate for $subdomain"
if ! certbot certonly --standalone -d "$subdomain"; then
    display_message "Certbot failed to renew the certificate. Please check the logs."
    exit 1
fi

# Check if the SSL certificate is valid
if certbot certificates | grep -q "$subdomain"; then
    display_message "SSL certificate for $subdomain is valid."
else
    display_message "SSL certificate for $subdomain is not valid. Please check the logs for more details."
    exit 1
fi

# Stop Teleport service with timeout
display_message "Stopping Teleport service"
if ! systemctl stop teleport; then
    display_message "Failed to stop Teleport service. Attempting to force stop..."
    systemctl kill teleport || {
        display_message "Failed to force stop Teleport service. Restoring from backup..."
        restore_backup
        exit 1
    }
fi

# Wait for service to stop
if ! wait_for_service "teleport" "$SERVICE_TIMEOUT"; then
    display_message "Teleport service failed to stop within timeout. Restoring from backup..."
    restore_backup
    exit 1
fi

# Clean up existing Teleport files
display_message "Cleaning up existing Teleport files"
rm -rf /var/lib/teleport/* || { display_message "Failed to clean up /var/lib/teleport/"; exit 1; }
rm -f /etc/teleport.yaml || { display_message "Failed to remove /etc/teleport.yaml"; exit 1; }

# Copy new SSL certificates
display_message "Copying new SSL certificates"
cp /etc/letsencrypt/live/"$subdomain"/fullchain.pem /var/lib/teleport/ || { display_message "Failed to copy fullchain.pem"; exit 1; }
cp /etc/letsencrypt/live/"$subdomain"/privkey.pem /var/lib/teleport/ || { display_message "Failed to copy privkey.pem"; exit 1; }

# Configure Teleport
display_message "Configuring Teleport"
if ! teleport configure -o file --cluster-name="$subdomain" --public-addr="$subdomain":443 --cert-file=/var/lib/teleport/fullchain.pem --key-file=/var/lib/teleport/privkey.pem; then
    display_message "Failed to configure Teleport. Please check the logs."
    exit 1
fi

# Restart Teleport service with timeout
display_message "Restarting Teleport service"
systemctl restart teleport

if ! wait_for_service "teleport" "$SERVICE_TIMEOUT"; then
    display_message "Teleport service failed to start within timeout. Restoring from backup..."
    restore_backup
    exit 1
fi

if systemctl is-active --quiet teleport; then
    display_message "Teleport service is running."
    display_message "Teleport SSL renewal process completed successfully!"
else
    display_message "Teleport service failed to start. Please check the logs for more details."
    exit 1
fi

# Check if the Teleport service is reachable
if curl -s --head --request GET "https://$subdomain" | grep "200 OK" > /dev/null; then
    display_message "Teleport service is reachable at https://$subdomain"
else
    display_message "Teleport service is not reachable at https://$subdomain. Please check the logs for more details."
    display_message "To check the Teleport logs, use the following command:"
    display_message "journalctl -u teleport -e"
    exit 1
fi